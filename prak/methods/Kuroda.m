function result = Kuroda(Az, u, v, epsilon = 0.01, maxim = 10000)itt = 0;Az(Az == 0) = 0.01;M = 1000000;# Initializationk = length(Az);Z = eye(k);lambd = zeros(k, 1);tau = zeros(1, k);# Sums of rows, columnsu0 = sum(Az, 2);v0 = sum(Az, 1);u(u == 0) = k * 0.01;v(v == 0) = k * 0.01;# Weights for Kuroda 1 (good)W = (u0 .^ 2) ./ (Az .^ 2);V = (v0 .^ 2) ./ (Az .^ 2);#Weights for Kuroda 2 (wasn't tested)#W = (u .^ 2) / 2;#V = (v .^ 2) / 2;# Weights for Kuroda 3 (simple)#W = ones(k);#V = ones(k);# Supporting variablesS = W ./ (u .^ 2) + V ./ (v .^ 2);#S(or(isinf(S), isnan(S))) = 0;S0 = W ./ (u0 .* u) + V ./ (v0 .* v);#S0(or(isinf(S0), isnan(S0))) = 0;coef = Az .* (S0 ./ S);coef(or(isnan(coef), isinf(coef))) = 0;Sinv = S .^ -1;Sinv(or(isnan(Sinv), isinf(Sinv))) = 0;    do      lambd0 = lambd;    tau0 = tau;        # Prevent negative numbers    neg = M * Az .* min(0, Z);         # Lambdas    cols = tau ./ S;    #cols(or(isnan(cols), isinf(cols))) = 0; # /0 occasions    lambd = (u - sum(coef - neg + cols, 2)) ./ sum(Sinv, 2);    lambd(or(isnan(lambd), isinf(lambd))) = 0;        # Taus    rows = lambd ./ S;    #rows(or(isnan(rows), isinf(rows))) = 0; # /0 occasions    tau = (v - sum(coef - neg + rows, 1)) ./ sum(Sinv, 1);    tau(or(isnan(tau), isinf(tau))) = 0;        # Z    for i = 1 : k      for j = 1 : k        if (Az(i,j) ~= 0)           if (S(i,j) ~= 0)            z(i,j) = (S0(i,j) + (lambd(i) + tau(j)) / Az(i,j)) / S(i,j);          else            z(i,j) = 0;          endif                  else          z(i,j) = 1;        endif      endfor    endfor    Z = z .* ((z >= 0) + (z < 0) / (1 + M));        diffLambd = abs(lambd .- lambd0);    diffTau = abs(tau .-tau0);    itt += 1;      until(or(        and(all(diffLambd < epsilon),            all(diffTau < epsilon)),        itt > maxim))    Z = round(Z);  X = Z .* Az;  result = round(X);  endfunction
